/*
This file is part of AfyaPro.

	Copyright (C) 2013 AfyaPro Foundation.

    AfyaPro is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    AfyaPro is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with AfyaPro.  If not, see <http://www.gnu.org/licenses/>.

*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.IO;

namespace AfyaPro_NextGen
{
    public partial class frmTOOImportation : DevExpress.XtraEditors.XtraForm
    {
        #region declaration

        private Type pType;
        private string pClassName = "";

        private AfyaPro_MT.clsAutoCodes pMdtAutoCodes;
        private AfyaPro_MT.clsDataImportExport pMdtDataImportExport;
        private AfyaPro_Types.clsResult pResult = new AfyaPro_Types.clsResult();
        private DataTable pDtFields = new DataTable("fields");
        private DataSet pDsData = new DataSet();
        private DataTable pDtData = new DataTable("data");
        private DataTable pDtDestinationTable = new DataTable();

        private bool pErrorOnPage0 = false;
        private bool pErrorOnPage1 = false;
        private bool pErrorOnPage2 = false;
        private bool pErrorOnPage3 = false;

        private string pIgnoreSomething = "";

        private Int16 pAutoGeneratedCodeKey = -1;
        private string pAutoGeneratedCodeFieldName = "";

        private DataTable pDtAutoCodeTables = new DataTable("autocodetables");

        #endregion

        #region frmTOOImportation
        public frmTOOImportation(string mDestinationTableName)
        {
            InitializeComponent();

            string mFunctionName = "frmTOOImportation";

            try
            {
                pType = this.GetType();
                pClassName = pType.FullName;

                this.Cursor = Cursors.WaitCursor;

                pMdtDataImportExport = (AfyaPro_MT.clsDataImportExport)Activator.GetObject(
                    typeof(AfyaPro_MT.clsDataImportExport),
                    Program.gMiddleTier + "clsDataImportExport");

                pMdtAutoCodes = (AfyaPro_MT.clsAutoCodes)Activator.GetObject(
                    typeof(AfyaPro_MT.clsAutoCodes),
                    Program.gMiddleTier + "clsAutoCodes");

                pDtFields.Columns.Add("sourcefieldname", typeof(System.String));
                pDtFields.Columns.Add("destinationfieldname", typeof(System.String));
                pDtFields.Columns.Add("allowdbnull", typeof(System.Boolean));

                //fill autocode tables
                pDtAutoCodeTables = pMdtAutoCodes.Get_CodeTypes("", "");

                //fill database tables
                DataTable mDtTables = pMdtDataImportExport.Get_DatabaseSchema();

                foreach (DataRow mDataRow in mDtTables.Rows)
                {
                    lstDestinationTables.Items.Add(mDataRow["TABLE_NAME"].ToString());
                }

                for (int mIndex = 0; mIndex < lstDestinationTables.Items.Count; mIndex++)
                {
                    if (lstDestinationTables.Items[mIndex].ToString().Trim().ToLower() ==
                        mDestinationTableName.Trim().ToLower())
                    {
                        lstDestinationTables.SelectedIndex = mIndex;
                        break;
                    }
                }

                pIgnoreSomething = Program.TransLate(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_IgnoreSomething.ToString());

                this.Cursor = Cursors.Default;
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                Program.Display_Error(pClassName, mFunctionName, ex.Message);
                return;
            }
        }
        #endregion

        #region frmTOOImportation_Load
        private void frmTOOImportation_Load(object sender, EventArgs e)
        {
            this.Load_Controls();
        }
        #endregion

        #region Load_Controls
        private void Load_Controls()
        {
            List<Object> mObjectsList = new List<Object>();

            mObjectsList.Add(pageWelcome);
            mObjectsList.Add(page0);
            mObjectsList.Add(page1);
            mObjectsList.Add(page2);
            mObjectsList.Add(page3);
            mObjectsList.Add(pageFinish);
            mObjectsList.Add(radSourceType.Properties.Items[0]);
            mObjectsList.Add(radSourceType.Properties.Items[1]);
            mObjectsList.Add(radSourceType.Properties.Items[2]);
            mObjectsList.Add(radSepChar.Properties.Items[0]);
            mObjectsList.Add(radSepChar.Properties.Items[1]);
            mObjectsList.Add(grpSepChar);
            mObjectsList.Add(txbFileName);
            mObjectsList.Add(cmdBrowse);
            mObjectsList.Add(txbSourceTable);
            mObjectsList.Add(txbDestinationTable);
            mObjectsList.Add(sourcefieldname);
            mObjectsList.Add(destinationfieldname);
            mObjectsList.Add(allowdbnull);
            mObjectsList.Add(chkAutoGenerate);

            Program.Apply_Language(this.Name, mObjectsList);
        }
        #endregion

        #region Fill_TableFields
        private bool Fill_TableFields()
        {
            string mFunctionName = "Fill_TableFields";

            try
            {
                pDtDestinationTable = pMdtDataImportExport.Get_TableSchema(lstDestinationTables.SelectedItem.ToString());
                pDtData.Columns.Clear();
                pDtFields.Rows.Clear();
                foreach (DataColumn mDataColumn in pDtDestinationTable.Columns)
                {
                    DataRow mNewRow = pDtFields.NewRow();
                    mNewRow["sourcefieldname"] = "";
                    mNewRow["destinationfieldname"] = mDataColumn.ColumnName;
                    mNewRow["allowdbnull"] = mDataColumn.AllowDBNull;
                    pDtFields.Rows.Add(mNewRow);
                    pDtFields.AcceptChanges();

                    pDtData.Columns.Add(mDataColumn.ColumnName, mDataColumn.DataType);
                }

                return true;
            }
            catch (Exception ex)
            {
                Program.Display_Error(pClassName, mFunctionName, ex.Message);
                return false;
            }
        }
        #endregion

        #region Get_AutoCodeSettings
        private bool Get_AutoCodeSettings()
        {
            string mFunctionName = "Get_AutoCodeSettings";

            try
            {

                DataView mDvAutoCodes = new DataView();
                mDvAutoCodes.Table = pDtAutoCodeTables;
                mDvAutoCodes.Sort = "tablename";

                int mRowIndex = mDvAutoCodes.Find(lstDestinationTables.SelectedItem.ToString());
                if (mRowIndex >= 0)
                {
                    chkAutoGenerate.Visible = true;
                    chkAutoGenerate.Checked = true;
                    pAutoGeneratedCodeKey = Convert.ToInt16(mDvAutoCodes[mRowIndex]["code"].ToString().Substring(8));
                    pAutoGeneratedCodeFieldName = mDvAutoCodes[mRowIndex]["fieldname"].ToString();
                }
                else
                {
                    chkAutoGenerate.Visible = false;
                    chkAutoGenerate.Checked = false;
                    pAutoGeneratedCodeKey = -1;
                    pAutoGeneratedCodeFieldName = "";
                }

                return true;
            }
            catch (Exception ex)
            {
                Program.Display_Error(pClassName, mFunctionName, ex.Message);
                return false;
            }
        }
        #endregion

        #region wizardControl1_SelectedPageChanging
        private void wizardControl1_SelectedPageChanging(object sender, DevExpress.XtraWizard.WizardPageChangingEventArgs e)
        {
            if (e.Direction == DevExpress.XtraWizard.Direction.Forward)
            {
                switch (e.PrevPage.Name.ToLower())
                {
                    case "page0":
                        {
                            if (pErrorOnPage0 == true)
                            {
                                e.Cancel = true;
                            }
                        }
                        break;
                    case "page1":
                        {
                            if (pErrorOnPage1 == true)
                            {
                                e.Cancel = true;
                            }
                        }
                        break;
                    case "page2":
                        {
                            if (pErrorOnPage2 == true)
                            {
                                e.Cancel = true;
                            }
                        }
                        break;
                    case "page3":
                        {
                            if (pErrorOnPage3 == true)
                            {
                                e.Cancel = true;
                            }
                        }
                        break;
                }
            }
        }
        #endregion

        #region radSourceType_SelectedIndexChanged
        private void radSourceType_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (radSourceType.SelectedIndex)
            {
                case 0: grpSepChar.Enabled = false; break;
                case 1: grpSepChar.Enabled = true; break;
                case 2: grpSepChar.Enabled = false; break;
            }
        }
        #endregion

        #region wizardControl1_NextClick
        private void wizardControl1_NextClick(object sender, DevExpress.XtraWizard.WizardCommandButtonClickEventArgs e)
        {
            int mRowIndex = -1;
            string mCSVSepChar = ",";
            string mFunctionName = "wizardControl1_NextClick";

            try
            {
                switch (e.Page.Name.ToLower())
                {
                    case "page0":
                        {
                            grdData.DataSource = null;
                            pErrorOnPage0 = false;

                            switch (radSepChar.SelectedIndex)
                            {
                                case 0: mCSVSepChar = ","; break;
                                case 1: mCSVSepChar = "\t"; break;
                            }

                            if (File.Exists(@txtFileName.Text) == false)
                            {
                                pErrorOnPage0 = true;
                                Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_FileNameIsInvalid.ToString());
                                txtFileName.Focus();
                                return;
                            }

                            switch (radSourceType.SelectedIndex)
                            {
                                //excel
                                case 0:
                                    {
                                        pDsData = Program.Excel_To_DataSet(this, @txtFileName.Text);
                                        if (pDsData == null)
                                        {
                                            pErrorOnPage0 = true;
                                            return;
                                        }
                                    } break;
                                //csv
                                case 1:
                                    {
                                        pDsData = Program.CSV_To_DataSet(this, @txtFileName.Text, mCSVSepChar);
                                        if (pDsData == null)
                                        {
                                            pErrorOnPage0 = true;
                                            return;
                                        }
                                    } break;
                                //xml
                                case 2:
                                    {
                                        pDsData = Program.XML_To_DataSet(this, @txtFileName.Text);
                                        if (pDsData == null)
                                        {
                                            pErrorOnPage0 = true;
                                            return;
                                        }
                                    } break;
                            }

                            if (pDsData != null)
                            {
                                lstSourceTables.Items.Clear();
                                foreach (DataTable mDataTable in pDsData.Tables)
                                {
                                    lstSourceTables.Items.Add(mDataTable.TableName);
                                }
                            }
                        }
                        break;
                    case "page1":
                        {
                            grdFields.DataSource = null;
                            pErrorOnPage1 = false;

                            if (pDsData.Tables.Count == 0)
                            {
                                pErrorOnPage1 = true;
                                return;
                            }

                            if (lstSourceTables.SelectedIndex == -1)
                            {
                                pErrorOnPage1 = true;
                                Program.Display_Info(AfyaPro_Types.clsSystemMessages.MessageIds.TOO_SelectSourceTable.ToString());
                                return;
                            }

                            if (lstDestinationTables.SelectedIndex == -1)
                            {
                                pErrorOnPage1 = true;
                                Program.Display_Info(AfyaPro_Types.clsSystemMessages.MessageIds.TOO_SelectDestinationTable.ToString());
                                return;
                            }

                            if (this.Fill_TableFields() == false)
                            {
                                pErrorOnPage1 = true;
                                return;
                            }

                            if (this.Get_AutoCodeSettings() == false)
                            {
                                pErrorOnPage1 = true;
                                return;
                            }

                            cboSourceFields.Items.Clear();
                            if (pErrorOnPage1 == false)
                            {
                                cboSourceFields.Items.Add("<" + pIgnoreSomething + ">");
                                foreach (DataColumn mDataColumn in pDsData.Tables[lstSourceTables.SelectedItem.ToString()].Columns)
                                {
                                    cboSourceFields.Items.Add(mDataColumn.ColumnName);
                                }
                            }

                            foreach (DataRow mDataRow in pDtFields.Rows)
                            {
                                bool mMatchFound = false;
                                for (int mItemIndex = 0; mItemIndex < cboSourceFields.Items.Count; mItemIndex++)
                                {
                                    if (mDataRow["destinationfieldname"].ToString().Trim().ToLower() ==
                                        cboSourceFields.Items[mItemIndex].ToString().Trim().ToLower())
                                    {
                                        mDataRow.BeginEdit();
                                        mDataRow["sourcefieldname"] = cboSourceFields.Items[mItemIndex].ToString().Trim();
                                        mDataRow.EndEdit();
                                        pDtFields.AcceptChanges();

                                        mMatchFound = true;
                                        break;
                                    }
                                }

                                if (mMatchFound == false)
                                {
                                    mDataRow.BeginEdit();
                                    mDataRow["sourcefieldname"] = 
                                        "<" + pIgnoreSomething + ">";
                                    mDataRow.EndEdit();
                                    pDtFields.AcceptChanges();
                                }
                            }

                            grdFields.DataSource = pDtFields;
                        }
                        break;
                    case "page2":
                        {
                            pDtData.Rows.Clear();
                            pDtData.Columns.Clear();
                            grdData.DataSource = null;
                            pErrorOnPage2 = false;

                            DataView mDvFields = new DataView();
                            mDvFields.Table = pDtFields;
                            mDvFields.Sort = "destinationfieldname";

                            //add columns
                            foreach (DataColumn mDataColumn in pDtDestinationTable.Columns)
                            {
                                string mFieldMap = mDataColumn.ColumnName;
                                bool mAllowDbNull = false;
                                mRowIndex = mDvFields.Find(mDataColumn.ColumnName);
                                if (mRowIndex >= 0)
                                {
                                    mFieldMap = mDvFields[mRowIndex]["sourcefieldname"].ToString();
                                    mAllowDbNull = Convert.ToBoolean(mDvFields[mRowIndex]["allowdbnull"]);
                                }

                                if (mFieldMap.ToLower() != 
                                    "<" + pIgnoreSomething.ToLower() + ">")
                                {
                                    pDtData.Columns.Add(mDataColumn.ColumnName, mDataColumn.DataType);
                                    pDtData.Columns[mDataColumn.ColumnName].AllowDBNull = mAllowDbNull;
                                }
                            }

                            if (pDtData.Columns.Count == 0)
                            {
                                pErrorOnPage2 = true;
                                Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.TOO_NoDataToImport.ToString());
                                return;
                            }

                            //add data
                            foreach (DataRow mDataRow in pDsData.Tables[lstSourceTables.SelectedItem.ToString()].Rows)
                            {
                                DataRow mNewRow = pDtData.NewRow();
                                foreach (DataColumn mDataColumn in pDtData.Columns)
                                {
                                    string mSourceFieldName = "";
                                    mRowIndex = mDvFields.Find(mDataColumn.ColumnName);
                                    if (mRowIndex >= 0)
                                    {
                                        mSourceFieldName = mDvFields[mRowIndex]["sourcefieldname"].ToString();
                                    }

                                    object mRowValue = mDataRow[mSourceFieldName];

                                    #region type conversion
                                    switch (mDataColumn.DataType.FullName.ToLower())
                                    {
                                        case "system.boolean":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToBoolean(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.byte":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToByte(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.datetime":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToDateTime(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.decimal":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToDouble(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.double":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToDouble(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.int16":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToInt16(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.int32":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToInt32(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.int64":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToInt64(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.sbyte":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToSByte(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.single":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToSingle(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.unint16":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToUInt16(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.unint32":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToUInt32(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        case "system.unint64":
                                            {
                                                try
                                                {
                                                    mRowValue = Convert.ToUInt64(mRowValue);
                                                }
                                                catch
                                                {
                                                    if (mDataColumn.AllowDBNull == true)
                                                    {
                                                        mRowValue = DBNull.Value;
                                                    }
                                                    else
                                                    {
                                                        pErrorOnPage2 = true;
                                                        Program.Display_Error(AfyaPro_Types.clsSystemMessages.MessageIds.GRL_InvalidTypeConvertion.ToString());
                                                        return;
                                                    }
                                                }
                                            }
                                            break;
                                        default: mRowValue = mRowValue.ToString(); break;
                                    }
                                    #endregion

                                    mNewRow[mDataColumn.ColumnName] = mRowValue;
                                }

                                pDtData.Rows.Add(mNewRow);
                                pDtData.AcceptChanges();
                            }

                            grdData.DataSource = pDtData;
                            grdData.MainView.PopulateColumns();
                            DevExpress.XtraGrid.Views.Grid.GridView mGridView = (DevExpress.XtraGrid.Views.Grid.GridView)grdData.MainView;
                            mGridView.BestFitColumns();

                            if (pAutoGeneratedCodeFieldName.Trim() != "")
                            {
                                bool mCodeFieldFound = false;
                                foreach (DataColumn mDataColumn in pDtData.Columns)
                                {
                                    if (mDataColumn.ColumnName.Trim().ToLower() == pAutoGeneratedCodeFieldName.Trim().ToLower())
                                    {
                                        mCodeFieldFound = true;
                                        break;
                                    }
                                }

                                if (mCodeFieldFound == true)
                                {
                                    chkAutoGenerate.Checked = false;
                                }
                                else
                                {
                                    chkAutoGenerate.Checked = true;
                                }
                            }
                        }
                        break;
                    case "page3":
                        {
                            pErrorOnPage3 = false;

                            this.Cursor = Cursors.WaitCursor;

                            //import
                            pResult = pMdtDataImportExport.Import(lstDestinationTables.SelectedItem.ToString(),
                                Convert.ToInt16(chkAutoGenerate.Checked), pAutoGeneratedCodeKey, pAutoGeneratedCodeFieldName, pDtData);
                            if (pResult.Exe_Result == 0)
                            {
                                pErrorOnPage3 = true;
                                this.Cursor = Cursors.Default;
                                Program.Display_Error(pResult.Exe_Message);
                                return;
                            }
                            if (pResult.Exe_Result == -1)
                            {
                                pErrorOnPage3 = true;
                                this.Cursor = Cursors.Default;
                                Program.Display_Server_Error(pResult.Exe_Message);
                                return;
                            }

                            this.Cursor = Cursors.Default;
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                Program.Display_Error(pClassName, mFunctionName, ex.Message);
                return;
            }
        }
        #endregion

        #region wizardControl1_FinishClick
        private void wizardControl1_FinishClick(object sender, CancelEventArgs e)
        {

        }
        #endregion

        #region cmdBrowse_Click
        private void cmdBrowse_Click(object sender, EventArgs e)
        {
            string mFunctionName = "cmdBrowse_Click";

            try
            {
                OpenFileDialog mDlg = new OpenFileDialog();

                switch (radSourceType.SelectedIndex)
                {
                    //excel
                    case 0:
                        {
                            mDlg.Filter = "Microsoft Excel 97-2003 Files (*.xls)|*.xls|All files (*.*)|*.*";
                            mDlg.FilterIndex = 0;
                        } 
                        break;
                    //csv
                    case 1:
                        {
                            mDlg.Filter = "Text Files(*.txt;*.csv)|*.txt;*.csv|All files (*.*)|*.*";
                            mDlg.FilterIndex = 0;
                        } 
                        break;
                    //xml
                    case 2:
                        {
                            mDlg.Filter = "XML Files(*.xml)|*.xml|All files (*.*)|*.*";
                            mDlg.FilterIndex = 0;
                        }
                        break;
                }

                mDlg.ShowDialog();
                txtFileName.Text = mDlg.FileName;
            }
            catch (Exception ex)
            {
                Program.Display_Error(pClassName, mFunctionName, ex.Message);
                return;
            }
        }
        #endregion

        #region wizardControl1_CancelClick
        private void wizardControl1_CancelClick(object sender, CancelEventArgs e)
        {
            DialogResult mDialogResult = Program.Display_Question(AfyaPro_Types.clsSystemMessages.MessageIds.TOO_QuitWizardQuestion.ToString(), 
                MessageBoxDefaultButton.Button2);

            if (mDialogResult != DialogResult.Yes)
            {
                e.Cancel = true;
            }
        }
        #endregion
    }
}